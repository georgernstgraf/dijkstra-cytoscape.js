{
  "version": 3,
  "sources": ["../src/cyto.ts", "../src/dijkstra.ts", "../src/app.ts", "../src/main.ts"],
  "sourcesContent": ["import { CytoscapeOptions, ElementsDefinition } from \"cytoscape\";\n\nconst cytoscape = globalThis.cytoscape as typeof import(\"cytoscape\");\nexport function cytoFactory(elements: ElementsDefinition) {\n    console.log(\"Cytoscape elements:\", elements);\n    options.elements = elements;\n    return cytoscape(options);\n}\nconst options: CytoscapeOptions = {\n    elements: [],\n    container: document.getElementById(\"cy-canvas\"), // container to render in\n    style: [ // the stylesheet for the graph\n        {\n            selector: \"node\",\n            style: {\n                \"background-color\": \"#600\",\n                \"label\": \"data(label)\",\n                \"font-weight\": \"bold\",\n                \"height\": \"10px\",\n                \"width\": \"10px\",\n                \"color\": \"#f60\",\n                \"font-size\": \"6px\",\n                \"text-halign\": \"center\", // Center horizontally\n                \"text-valign\": \"center\", // Center vertically\n                \"text-margin-y\": 0, // No vertical margin\n                \"text-margin-x\": 0, // No horizontal margin\n            },\n        },\n        {\n            selector: \"node.highlighted\",\n            style: {\n                \"background-color\": \"#f60\",\n                \"color\": \"#600\",\n            },\n        },\n        {\n            selector: \"edge\",\n            style: {\n                \"width\": \"1px\",\n                \"font-size\": \"6px\",\n                \"color\": \"#ffa\",\n                \"label\": \"data(label)\",\n                \"line-color\": \"#262\",\n                \"target-arrow-color\": \"#262\",\n                \"target-arrow-shape\": \"none\",\n                \"curve-style\": \"bezier\",\n                \"text-outline-color\": \"#262\", // Black outline\n                \"text-outline-width\": 1,\n            },\n        },\n        {\n            selector: \"edge.highlighted\",\n            style: {\n                \"line-color\": \"#f60\",\n                \"target-arrow-color\": \"#f60\",\n                \"width\": 1.5,\n            },\n        },\n    ],\n    layout: {\n        name: \"cose\",\n    },\n};\n", "import { Core, NodeSingular } from \"cytoscape\";\nclass Node {\n    static getDistance(n: NodeSingular): number {\n        return n.data(\"distance\");\n    }\n    static setDistance(n: NodeSingular, value: number) {\n        n.data(\"distance\", value);\n    }\n    static getPrevious(n: NodeSingular): NodeSingular | null {\n        if (!n.data(\"previous\")) return null;\n        return n.cy().getElementById(n.data(\"previous\"));\n    }\n    static setPrevious(n: NodeSingular, value: string | null) {\n        n.data(\"previous\", value);\n    }\n    static isFinalized(n: NodeSingular): boolean {\n        return n.data(\"finalized\");\n    }\n    static setFinalized(n: NodeSingular, value: boolean = true) {\n        n.data(\"finalized\", value);\n    }\n    static getDistToCur(n: NodeSingular): number {\n        return n.data(\"dist_to_cur\");\n    }\n    static setDistToCur(n: NodeSingular, value: number) {\n        n.data(\"dist_to_cur\", value);\n    }\n    static toString(n: NodeSingular): string {\n        return `Node ${n.id()}: distance = ${Node.getDistance(n)}, previous = ${\n            Node.getPrevious(n)?.id() ?? \"null\"\n        }, finalized = ${Node.isFinalized(n)}, distCur = ${\n            Node.getDistToCur(n)\n        }`;\n    }\n}\n\nexport function dijkstra(\n    graph: Core,\n    start: NodeSingular,\n    end: NodeSingular,\n): Array<NodeSingular> {\n    const entdeckte: Set<NodeSingular> = new Set();\n    entdeckte.add(start);\n    // Initialize distances and previous nodes\n    for (const node of graph.nodes()) {\n        Node.setDistance(node, Infinity);\n        Node.setPrevious(node, null);\n        Node.setFinalized(node, false);\n    }\n    Node.setDistance(start, 0);\n    // initially all nodes are in the queue\n    while (entdeckte.size > 0) {\n        // Find the node with the smallest distance\n        console.log(\"Entdeckte Nodes Size:\", entdeckte.size);\n        const currentSmallest = Array.from(entdeckte).reduce((\n            a,\n            b,\n        ) => (Node.getDistance(a) < Node.getDistance(b) ? a : b));\n        if (currentSmallest === end) {\n            console.log(\"Ende gefunden:\", Node.toString(currentSmallest));\n            break;\n        }\n        // currentNode is now the node with the smallest distance\n        Node.setFinalized(currentSmallest);\n        console.log(\n            \"Current Smallest entdeckte\",\n            Node.toString(currentSmallest),\n        );\n        console.log(\n            \"Starte Entdecken davon ausgehend\",\n        );\n        for (const edge of currentSmallest.connectedEdges()) {\n            const nachbar = edge.source() === currentSmallest\n                ? edge.target()\n                : edge.source();\n            if (Node.isFinalized(nachbar)) continue;\n            entdeckte.add(nachbar);\n            Node.setDistToCur(nachbar, edge.data(\"weight\"));\n            console.log(\n                \"Nachbar:\",\n                Node.toString(nachbar),\n            );\n            // Update distances for neighbors\n            const alt = Node.getDistance(currentSmallest) +\n                Node.getDistToCur(nachbar);\n            if (alt < Node.getDistance(nachbar)) {\n                Node.setDistance(nachbar, alt);\n                Node.setPrevious(nachbar, currentSmallest.id());\n                console.log(\n                    \"UPDATE: \",\n                    Node.toString(nachbar),\n                );\n            }\n        }\n        entdeckte.delete(currentSmallest);\n        console.log(\"Abgeschlossen:\", Node.toString(currentSmallest));\n    }\n    const path: NodeSingular[] = [];\n    let currentEnd: NodeSingular | null = end;\n\n    while (currentEnd) {\n        console.log(\n            \"Return: Current End Node:\",\n            currentEnd.id(),\n        );\n        path.unshift(currentEnd); // pump it left into the array\n        currentEnd = Node.getPrevious(currentEnd); // previous[currentNode];\n    }\n\n    return path.length > 1 ? path : [];\n}\n", "import { cytoFactory } from \"./cyto.ts\";\nimport { Core, ElementsDefinition } from \"cytoscape\";\nimport { dijkstra } from \"./dijkstra.ts\";\n// Add declaration for globalThis.ccyy\ndeclare global {\n    // Adjust the type of ccyy as needed\n    var cy: ReturnType<typeof cytoFactory>;\n}\n\ninterface SupplyJson {\n    nodes: string[];\n    edges: string[];\n    matrix: number[][];\n}\nexport class App {\n    supply_url =\n        \"https://grafg1.spengergasse.at/graphsupply/adjacency-weighted\";\n    dom_nodes: Record<string, HTMLElement | null> = {};\n    cy: Core | null = null;\n    constructor() {\n        console.log(\"App initialized\");\n        this.init();\n    }\n    init() { // Registering Dom Nodes and putting event listeners on them\n        console.log(\"init called\");\n        const choose = document.getElementById(\"choose\");\n        this.dom_nodes[\"choose\"] = choose;\n        choose!.addEventListener(\"change\", async () => {\n            await this.graph_chosen();\n        });\n        this.init_graphselect();\n        this.dom_nodes[\"select-start\"] = document.getElementById(\n            \"select-start\",\n        );\n        this.dom_nodes[\"select-end\"] = document.getElementById(\n            \"select-end\",\n        );\n        // init theme from local storage if available\n        const theme = globalThis.localStorage.getItem(\"ui-theme\");\n        if (theme) {\n            const html = document.documentElement;\n            html.setAttribute(\"data-bs-theme\", theme);\n        }\n        this.dom_nodes[\"theme-toggle\"] = document.getElementById(\n            \"theme-toggle\",\n        ) as HTMLButtonElement;\n        this.dom_nodes[\"theme-toggle\"]!.addEventListener(\"click\", () => {\n            const html = document.documentElement;\n            const theme = html.getAttribute(\"data-bs-theme\");\n            const toggled_theme = theme === \"dark\" ? \"light\" : \"dark\";\n            html.setAttribute(\n                \"data-bs-theme\",\n                toggled_theme,\n            );\n            globalThis.localStorage.setItem(\n                \"ui-theme\",\n                toggled_theme,\n            );\n        });\n        this.dom_nodes[\"btn_calculate\"] = document.getElementById(\n            \"btn_calculate\",\n        );\n        this.dom_nodes[\"btn_calculate\"]!.addEventListener(\n            \"click\",\n            this.do_dijkstra.bind(this),\n        );\n    }\n    do_dijkstra() {\n        console.log(\"Dijkstra button clicked\");\n        if (!this.cy) {\n            console.error(\"Cytoscape instance is not initialized.\");\n            return;\n        }\n        const start = this.cy.getElementById(\n            (this.dom_nodes[\"select-start\"] as HTMLSelectElement)?.value,\n        );\n        const end = this.cy.getElementById(\n            (this.dom_nodes[\"select-end\"] as HTMLSelectElement)?.value,\n        );\n        if (!start || !end) {\n            console.error(\"Start or end node not found.\");\n            return;\n        }\n        const path = dijkstra(this.cy, start, end);\n        console.log(\"Shortest path:\", path);\n        // Highlight the path\n        this.cy.elements().removeClass(\"highlighted\");\n        for (let i = 0; i < path.length - 1; i++) {\n            const edge = this.cy.getElementById(\n                App.createId(path[i].id(), path[i + 1].id()),\n            );\n            edge.addClass(\"highlighted\");\n            path[i].addClass(\"highlighted\");\n        }\n        path.at(-1)?.addClass(\"highlighted\");\n    }\n    static createId(a: string, b: string): string {\n        return a < b ? `${a}|${b}` : `${b}|${a}`;\n    }\n    async graph_chosen() {\n        // handle change event\n        const selectBox = this.dom_nodes[\"choose\"] as HTMLSelectElement;\n        const selectedIndex = selectBox.selectedIndex;\n        if (selectedIndex === 0) {\n            console.log(\"No graph selected\");\n            return;\n        }\n        const selectedValue = selectBox.value;\n        console.log(\"Selected value:\", selectedValue);\n        const json: SupplyJson = await (await fetch(selectedValue)).json();\n        console.log(\"JSON data:\", json);\n        // have to handle nodenames myself\n        if (!json.nodes) {\n            let letters;\n            // letters or numbers depending on matrix.length\n            const length = json.matrix.length;\n            if (length > 26) {\n                letters = Array.from(\n                    { length },\n                    (_, i) => String(i + 1),\n                );\n            } else {\n                letters = Array.from(\n                    { length },\n                    (_, i) => String.fromCharCode(65 + i),\n                );\n                json.nodes = letters;\n            }\n        }\n        this.populate_start_end(json.nodes);\n        this.paint_graph(json);\n    }\n\n    paint_graph(json: SupplyJson) {\n        //        json.nodes: [\"A\", \"B\", \"C\"]     json.matrix: [][];\n\n        const names = json.nodes;\n        const elements: ElementsDefinition = { nodes: [], edges: [] };\n        // Create nodes first\n        for (const name of names) {\n            elements.nodes.push({ data: { id: name, label: name } });\n        }\n        // Create edges\n        for (let row = 0; row < names.length; row++) {\n            for (let col = row + 1; col < names.length; col++) { // only upper right triangle\n                if (json.matrix[row][col] > 0) {\n                    elements.edges.push({\n                        data: {\n                            id: App.createId(names[row], names[col]),\n                            source: names[row],\n                            target: names[col],\n                            weight: json.matrix[row][col], // number!!\n                            label: String(\n                                json.matrix[row][col],\n                            ),\n                        },\n                    });\n                }\n            }\n        }\n        if (globalThis.cy) {\n            globalThis.cy.destroy();\n        }\n        const cy = cytoFactory(elements);\n        globalThis.cy = cy;\n        this.cy = cy;\n    }\n\n    populate_start_end(nodes: string[]) {\n        const start = this.dom_nodes[\"select-start\"];\n        const end = this.dom_nodes[\"select-end\"] as HTMLSelectElement;\n        start!.innerHTML = \"\";\n        end!.innerHTML = \"\";\n        for (const value of nodes) {\n            const option1 = document.createElement(\"option\");\n            option1.value = value;\n            option1.textContent = value;\n            start!.appendChild(option1);\n            const option2 = document.createElement(\"option\");\n            option2.value = value;\n            option2.textContent = value;\n            end!.appendChild(option2);\n        }\n        // Second select box has last node as preselected default\n        end!.selectedIndex = end!.options.length - 1;\n    }\n    init_graphselect() {\n        const choose = this.dom_nodes[\"choose\"];\n        fetch(\n            this.supply_url,\n        ).then((response) => {\n            if (!response.ok) {\n                throw new Error(\"Network response was not ok\");\n            }\n            return response.json();\n        }).then((data) => {\n            choose!.innerHTML = \"\";\n            const option = document.createElement(\"option\");\n            option.textContent = \"Choose a graph\";\n            choose!.appendChild(option);\n            for (const value of data) {\n                const option = document.createElement(\"option\");\n                option.value = value;\n                option.textContent = value.split(\"/\").pop()!.split(\".\")[0];\n                choose!.appendChild(option);\n            }\n        }).catch((error) => {\n            console.error(\"Error fetching data:\", error);\n        });\n    }\n}\n", "import { App } from \"./app.ts\";\n\ndeclare global {\n    // Augment the globalThis type to include 'app'\n    var app: App;\n}\n\nfunction main(): void {\n    const app = new App();\n    globalThis.app = app;\n    setTimeout(() => {\n        const choose: HTMLSelectElement = app\n            .dom_nodes[\"choose\"]! as HTMLSelectElement;\n        choose.selectedIndex =\n            Math.floor(Math.random() * (choose.options.length - 1)) + 1; // first is \"choose a graph\"\n        choose.dispatchEvent(new Event(\"change\"));\n    }, 1000);\n}\n\nmain();\n"],
  "mappings": "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",
  "names": ["theme", "option"]
}
